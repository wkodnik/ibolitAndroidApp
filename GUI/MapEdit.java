/*
 * MapEdit.java
 *
 * Created on May 9, 2008, 1:29 AM
 */
package GUI;

import java.awt.event.KeyEvent;
import javax.swing.JFileChooser;
import javax.swing.JMenu;

/**
 *
 * @author  sasa
 */
public class MapEdit extends javax.swing.JFrame {

    /** Creates new form MapEdit */
    public MapEdit() {
        initComponents();
        initUserComponents();
    }

    private void initUserComponents() {

        javax.swing.ToolTipManager ttm = javax.swing.ToolTipManager.sharedInstance();
        ttm.setInitialDelay(0);
        ttm.setDismissDelay(Integer.MAX_VALUE);
        ttm.setEnabled(mapedit.Constants.tooltip);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        terrainTypeGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        picture1 = new GUI.Picture();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        copyButton = new javax.swing.JMenuItem();
        pasteButton = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        cflip = new javax.swing.JCheckBoxMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        workMenu = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem19 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        picture1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                picture1MouseWheelMoved(evt);
            }
        });
        picture1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                picture1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                picture1MouseReleased(evt);
            }
        });
        picture1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                picture1ComponentMoved(evt);
            }
        });
        picture1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                picture1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                picture1MouseMoved(evt);
            }
        });
        picture1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                picture1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout picture1Layout = new javax.swing.GroupLayout(picture1);
        picture1.setLayout(picture1Layout);
        picture1Layout.setHorizontalGroup(
            picture1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 777, Short.MAX_VALUE)
        );
        picture1Layout.setVerticalGroup(
            picture1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(picture1);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Open...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Close");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Save As...");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator2);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setText("Redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(redoMenuItem);
        jMenu2.add(jSeparator4);

        copyButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jMenu2.add(copyButton);

        pasteButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });
        jMenu2.add(pasteButton);
        jMenu2.add(jSeparator3);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Mirror>");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Mirror<");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Mirror^");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Mirrorv");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem13);

        cflip.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        cflip.setText("FlipMirror");
        jMenu2.add(cflip);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Map");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Teams...");
        jMenuItem9.setEnabled(false);
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setText("Properties");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem15);

        jMenuBar1.add(jMenu5);

        jMenu3.setText("Window");

        jMenuItem7.setText("New Palette");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        jMenuItem8.setText("Show Palette");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuBar1.add(jMenu3);

        workMenu.setText("Workspace");
        jMenuBar1.add(workMenu);

        jMenu6.setText("Help");

        jMenuItem16.setText("Shortcuts...");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem16);

        jMenuItem14.setText("To be Continued... err created.");
        jMenu6.add(jMenuItem14);
        jMenu6.add(jSeparator5);

        jMenuItem19.setText("Sir, may i have music... please? ");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem19);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void picture1ComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_picture1ComponentMoved
    try {
        mapedit.Constants.getCurrentMap().getDisplay().setBounds(getMapBounds());
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } catch (IndexOutOfBoundsException e) {
        System.out.println("Problem if not during initialization");
    } catch (NullPointerException e) {
    }
}//GEN-LAST:event_picture1ComponentMoved

private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
    try {
        mapedit.Constants.getCurrentMap().getDisplay().setBounds(getMapBounds());
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } catch (IndexOutOfBoundsException e) {
        System.out.println("Problem if not during initialization");
    } catch (NullPointerException e) {
    }
}//GEN-LAST:event_jScrollPane1ComponentResized

private void picture1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picture1MouseMoved
    newMouseCor(evt);
    try {
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } catch (IndexOutOfBoundsException e) {
    } catch (NullPointerException e) {
    }
    if (mouseShifted()) {
        int[] xy = {
            evt.getX() / mapedit.Constants.getCurrentMap().getDisplay().getXScale(),
            evt.getY() / mapedit.Constants.getCurrentMap().getDisplay().getYScale()
        };
        try {
            String ttt = mapedit.Constants.getCurrentMap().getTile(xy[0], xy[1]).getTooltipText();
            picture1.setToolTipText(ttt);
        } catch (NullPointerException ex) {
        }
    }
}//GEN-LAST:event_picture1MouseMoved

private void picture1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picture1MousePressed
    if (mapedit.Constants.getCurrentMap() == null)
        return;
    mousePressedCor[evt.getButton()][0] = evt.getX();
    mousePressedCor[evt.getButton()][1] = evt.getY();
    mouseDown[evt.getButton()][0] = true;
    mouseDown[evt.getButton()][1] = false;
    if (mouseDown[3][0] == false && mouseDown[1][0] == true
            && mapedit.Constants.getCurrentPalette().isSelected()) {
        GUI.Palette p = mapedit.Constants.getCurrentPalette();
        int[] xy = {
            evt.getX() / mapedit.Constants.getCurrentMap().getDisplay().getXScale(),
            evt.getY() / mapedit.Constants.getCurrentMap().getDisplay().getYScale()
        };
        int size = mapedit.Constants.getCurrentPalette().getPaletteSize();
        int i = 0;
        try {
            i = (Integer) p.getPalleteEditor().getItem();
            i = mapedit.Constants.getCurrentMap().getTile(xy[0], xy[1]).getHeight() + i;
        } catch (Exception ex) {
        }

        mapedit.Constants.getCurrentMap().change();
        mapedit.Constants.lockMapChange = true;
        for (int y = xy[1] - size + 1; y <= xy[1] + size - 1; y++) {
            for (int x = xy[0] - size + 1; x <= xy[0] + size - 1; x++) {
                if (x < 0 || y < 0 || x >= mapedit.Constants.getCurrentMap().getWidth()
                        || y >= mapedit.Constants.getCurrentMap().getHeight())
                    continue;
                if (p.getSelectedIndex() == Palette.TERRAIN) {
                    Objects.Tile o = (Objects.Tile) p.getPalleteEditor().getItem();
                    mapedit.Constants.getCurrentMap().setTileType(x, y, o.getType());
                } else if (p.getSelectedIndex() == Palette.UNIT) {
                    Objects.Unit o = (Objects.Unit) p.getPalleteEditor().getItem();
                    if (mapedit.Constants.getCurrentPalette().getTeam() != Objects.Team.getNeutralPassive())
                        mapedit.Constants.getCurrentMap().setTileUnit(x, y, new Objects.Unit(o.getType(),
                                mapedit.Constants.getCurrentPalette().getTeam()));
                } else if (p.getSelectedIndex() == Palette.ELEVATION) {
                    i = (i > 32) ? 32 : (i < 0) ? 0 : i;
                    mapedit.Constants.getCurrentMap().setTileHeight(x, y, i);
                }
            }
        }
        mapedit.Constants.lockMapChange = false;


    } else if (mouseDown[3][0] == false && mouseDown[1][0] == true) {
        if (!mapedit.Constants.pasting) {
            dragCoors[0][0] = evt.getX() / mapedit.Constants.getCurrentMap().getDisplay().getXScale();
            dragCoors[0][1] = evt.getY() / mapedit.Constants.getCurrentMap().getDisplay().getYScale();
            dragCoors[1][0] = dragCoors[0][0];
            dragCoors[1][1] = dragCoors[0][1];
        } else {
            int xx = mouseCor[0][0] / mapedit.Constants.getCurrentMap().getDisplay().getXScale();
            int yy = mouseCor[0][1] / mapedit.Constants.getCurrentMap().getDisplay().getYScale();
            mapedit.Constants.getCurrentMap().setTiles(xx, yy, mapedit.Constants.tilesCopy);
            mapedit.Constants.pasting = false;
        }
    }
    mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
}//GEN-LAST:event_picture1MousePressed

private void picture1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picture1MouseReleased
    mouseReleasedCor[evt.getButton()][0] = evt.getX();
    mouseReleasedCor[evt.getButton()][1] = evt.getY();
    mouseDown[evt.getButton()][0] = false;
    mouseDown[evt.getButton()][1] = true;
}//GEN-LAST:event_picture1MouseReleased

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    new NewChooser().setVisible(true);
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void picture1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picture1MouseDragged
    if (mapedit.Constants.getCurrentMap() == null)
        return;
    newMouseCor(evt);
    if (mouseShifted()) {
        if (mouseDown[1][0] == false && mouseDown[3][0] == true) {
            if (evt.isShiftDown()) {
                setScale(mouseCor[0][1] - mouseCor[1][1]);
            } else {
                //System.out.println("Nope");
            }
        } else if (mouseDown[3][0] == false && mouseDown[1][0] == true && !mapedit.Constants.pasting) {
            if (mapedit.Constants.getCurrentPalette().isSelected()) {
                picture1MousePressed(evt);
            } else {
                dragCoors[1][0] = evt.getX() / mapedit.Constants.getCurrentMap().getDisplay().getXScale();
                dragCoors[1][1] = evt.getY() / mapedit.Constants.getCurrentMap().getDisplay().getYScale();
                mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
            }
        }
    } else if (mouseDown[1][0] == false && mouseDown[3][0] == true && !evt.isShiftDown() && !mapedit.Constants.pasting) {
        javax.swing.JScrollBar vb = jScrollPane1.getVerticalScrollBar();
        javax.swing.JScrollBar hb = jScrollPane1.getHorizontalScrollBar();
        //System.out.println("" + (0 - mouseCor[0][1] + mouseCor[1][1]) + ", " + (0 - mouseCor[0][0] + mouseCor[1][0]));
        vb.setValue(vb.getValue() - gMouseCor[0][1] + gMouseCor[1][1]);
        hb.setValue(hb.getValue() - gMouseCor[0][0] + gMouseCor[1][0]);
    }
    if (mouseShifted()) {
        int[] xy = {
            evt.getX() / mapedit.Constants.getCurrentMap().getDisplay().getXScale(),
            evt.getY() / mapedit.Constants.getCurrentMap().getDisplay().getYScale()
        };
        try {
            String ttt = mapedit.Constants.getCurrentMap().getTile(xy[0], xy[1]).getTooltipText();
            picture1.setToolTipText(ttt);
        } catch (NullPointerException ex) {
        }
    }
}//GEN-LAST:event_picture1MouseDragged

private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
    new GUI.Palette().setVisible(true);
}//GEN-LAST:event_jMenuItem7ActionPerformed

private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
    mapedit.Constants.getCurrentPalette().requestFocus();
}//GEN-LAST:event_jMenuItem8ActionPerformed

private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    if (evt.getKeyChar() == ' ') {
        if (mapedit.Constants.getCurrentPalette().getPalleteEditor().isSelected()) {
            mapedit.Constants.getCurrentPalette().getPalleteEditor().unselect();
        } else {
            mapedit.Constants.pasting = false;
            mapedit.Constants.getCurrentPalette().getPalleteEditor().select();
        }
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } else if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
        if (!mapedit.Constants.getCurrentPalette().isSelected()) {
            int xs = Math.min(dragCoors[0][0], dragCoors[1][0]),
                    xl = Math.max(dragCoors[0][0], dragCoors[1][0]),
                    ys = Math.min(dragCoors[0][1], dragCoors[1][1]),
                    yl = Math.max(dragCoors[0][1], dragCoors[1][1]);

            mapedit.Constants.getCurrentMap().change();
            mapedit.Constants.lockMapChange = true;
            for (int i = ys; i <= yl; i++) {
                for (int j = xs; j <= xl; j++) {
                    if (j > 0 && j < mapedit.Constants.getCurrentMap().getWidth()
                            && i > 0 && i < mapedit.Constants.getCurrentMap().getHeight())
                        mapedit.Constants.getCurrentMap().setTileUnit(j, i, null);
                }
            }
            mapedit.Constants.lockMapChange = false;
            mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
        }
    } else if (evt.getKeyCode() == KeyEvent.VK_U) {
        mapedit.Constants.getCurrentMap().change();
        mapedit.Constants.lockMapChange = true;
        for (int i = 0; i < mapedit.Constants.getCurrentMap().getWidth(); i++) {
            for (int j = 0; j < mapedit.Constants.getCurrentMap().getHeight(); j++) {
                Objects.Tile t = mapedit.Constants.getCurrentMap().getTile(i, j);
                mapedit.Constants.getCurrentMap().setTileHeight(i, j, t.getHeight() + 1);
            }
        }
        mapedit.Constants.lockMapChange = false;
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();

    } else if (evt.getKeyCode() == KeyEvent.VK_D) {
        mapedit.Constants.getCurrentMap().change();
        mapedit.Constants.lockMapChange = true;
        for (int i = 0; i < mapedit.Constants.getCurrentMap().getWidth(); i++) {
            for (int j = 0; j < mapedit.Constants.getCurrentMap().getHeight(); j++) {
                Objects.Tile t = mapedit.Constants.getCurrentMap().getTile(i, j);
                mapedit.Constants.getCurrentMap().setTileHeight(i, j, t.getHeight() - 1);
            }
        }
        mapedit.Constants.lockMapChange = false;
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } else if (evt.getKeyCode() == KeyEvent.VK_B) {
        //if (mapedit.Constants.getTerrainView == mapedit.Constants.terrainView.BLOCKS)
        //    mapedit.Constants.getTerrainView = mapedit.Constants.terrainView.ROCK;
        //else
        //    mapedit.Constants.getTerrainView = mapedit.Constants.terrainView.BLOCKS;
        mapedit.Constants.getCurrentMap().getDisplay().updateAll();
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } else if (evt.getKeyCode() == KeyEvent.VK_G) {
        mapedit.Constants.grid = !mapedit.Constants.grid;
        mapedit.Constants.getCurrentMap().getDisplay().updateAll();
        mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
    } else if (evt.getKeyCode() == KeyEvent.VK_T) {
        mapedit.Constants.tooltip = !mapedit.Constants.tooltip;
        javax.swing.ToolTipManager.sharedInstance().setEnabled(mapedit.Constants.tooltip);
    } else if (evt.getKeyCode() == KeyEvent.VK_N && evt.isAltDown()) {
        if (mapedit.Constants.getCurrentPalette() != null)
            mapedit.Constants.getCurrentPalette().selectNext();
    } else if (evt.getKeyCode() == KeyEvent.VK_P && evt.isAltDown()) {
        if (mapedit.Constants.getCurrentPalette() != null)
            mapedit.Constants.getCurrentPalette().selectPrevious();
    }
}//GEN-LAST:event_formKeyPressed

private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
    if (mapedit.Constants.pasting || mapedit.Constants.getCurrentPalette().isSelected())
        return;
    int dxl = Math.min(dragCoors[0][0], dragCoors[1][0]),
            dxr = Math.max(dragCoors[0][0], dragCoors[1][0]),
            dyl = Math.min(dragCoors[0][1], dragCoors[1][1]),
            dyr = Math.max(dragCoors[0][1], dragCoors[1][1]);
    mapedit.Constants.tilesCopy = new Objects.Tile[dyr - dyl + 1][dxr - dxl + 1];
    for (int i = dxl; i <= dxr; i++) {
        for (int j = dyl; j <= dyr; j++) {
            //System.out.println(mapedit.Constants.getCurrentMap().getTiles()[j][i].getType());
            mapedit.Constants.tilesCopy[j - dyl][i - dxl] =
                    mapedit.Constants.getCurrentMap().getTiles()[j][i].copy();
        }
    }
}//GEN-LAST:event_copyButtonActionPerformed

private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
    if (mapedit.Constants.pasting || mapedit.Constants.getCurrentPalette().isSelected())
        return;
    mapedit.Constants.pasting = true;
}//GEN-LAST:event_pasteButtonActionPerformed

private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
    if (mapedit.Constants.getCurrentMap() == null) return;
    if (mapedit.Constants.getCurrentMap().getSaveFile() != null)
        mapedit.Constants.getCurrentMap().save();
    else
        jMenuItem5ActionPerformed(evt);
}//GEN-LAST:event_jMenuItem4ActionPerformed

private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
    jFileChooser1.setApproveButtonText("Save");
    int returnVal = jFileChooser1.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        mapedit.Constants.getCurrentMap().setSaveFile(jFileChooser1.getSelectedFile());
        mapedit.Constants.getCurrentMap().save();
    }
}//GEN-LAST:event_jMenuItem5ActionPerformed

private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
    new Teams(this, true).setVisible(true);
}//GEN-LAST:event_jMenuItem9ActionPerformed

private void picture1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_picture1KeyPressed
}//GEN-LAST:event_picture1KeyPressed

private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
    mapedit.Constants.getCurrentMap().Mirror(Objects.Map.Mirrors.LTOR);
    mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
}//GEN-LAST:event_jMenuItem10ActionPerformed

private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
    mapedit.Constants.getCurrentMap().Mirror(Objects.Map.Mirrors.RTOL);
    mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
}//GEN-LAST:event_jMenuItem11ActionPerformed

private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
    mapedit.Constants.getCurrentMap().Mirror(Objects.Map.Mirrors.DTOU);
    mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
}//GEN-LAST:event_jMenuItem12ActionPerformed

private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
    mapedit.Constants.getCurrentMap().Mirror(Objects.Map.Mirrors.UTOD);
    mapedit.Constants.getCurrentMap().getDisplay().fullRedraw();
}//GEN-LAST:event_jMenuItem13ActionPerformed

private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
    mapedit.Constants.quit();
}//GEN-LAST:event_jMenuItem6ActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    jFileChooser1.setApproveButtonText("Open");
    int returnVal = jFileChooser1.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
            xmlska.Node map = xmlska.Reader.Read(jFileChooser1.getSelectedFile());
            Objects.Map m = Objects.Map.fromXML(map);
            m.setSaveFile(jFileChooser1.getSelectedFile());
            mapedit.Constants.bringToFront(m);
            m.getDisplay().fullRedraw();
            Palette.refreshTeams();
            setUndoRedoAbility(false, false);
        } catch (java.lang.IllegalArgumentException e) {
            System.out.println("Not A MAP");
            e.printStackTrace();
        } catch (java.io.IOException e) {
            System.out.println("Not A FILE");
        }
    }
}//GEN-LAST:event_jMenuItem2ActionPerformed

private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
    mapedit.Constants.mapWindows.remove(0);
    if (mapedit.Constants.mapWindows.size() > 0)
        mapedit.Constants.bringToFront(mapedit.Constants.mapWindows.get(0));
    else;
}//GEN-LAST:event_jMenuItem3ActionPerformed

private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
    if (mapedit.Constants.getCurrentMap() != null)
        new Properties(this, true).setVisible(true);
}//GEN-LAST:event_jMenuItem15ActionPerformed

private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
    new Shortcuts(this, true).setVisible(true);
}//GEN-LAST:event_jMenuItem16ActionPerformed

private void picture1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_picture1MouseWheelMoved
    setScale(evt.getWheelRotation());
}//GEN-LAST:event_picture1MouseWheelMoved

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    mapedit.Constants.quit();
}//GEN-LAST:event_formWindowClosing

private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
    javax.swing.JOptionPane.showMessageDialog(rootPane, "No.");
}//GEN-LAST:event_jMenuItem19ActionPerformed

private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
    mapedit.Constants.getCurrentMap().undo();
}//GEN-LAST:event_undoMenuItemActionPerformed

private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
    mapedit.Constants.getCurrentMap().redo();
}//GEN-LAST:event_redoMenuItemActionPerformed

    public boolean getFlip() {
        return cflip.getState();
    }

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
    }

    private void setScale(int d) {
        if (mapedit.Constants.getCurrentMap() == null) return;
        int s = mapedit.Constants.getCurrentMap().getDisplay().getXScale();
        s += d;
        s = (s < 16) ? 16 : s;
        s = (s > 64) ? 64 : s;
        mapedit.Constants.getCurrentMap().getDisplay().setScale(s);
        mapedit.Constants.getCurrentMap().getDisplay().updateAll();
    }

    public java.awt.Rectangle getMapBounds() {
        return new java.awt.Rectangle(
                picture1.getBounds().x * -1,
                picture1.getBounds().y * -1,
                jScrollPane1.getBounds().width,
                jScrollPane1.getBounds().height);
    }

    public JMenu getWorkMenu() {
        return workMenu;
    }

    @Override
    public void repaint() {
        super.repaint();
        try {
            picture1.setImage(mapedit.Constants.getCurrentMap().getDisplay().getImage());
            picture1.paint(picture1.getGraphics());
        } catch (NullPointerException e) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MapEdit().setVisible(true);
            }
        });
    }

    public Picture getPicture() {
        return picture1;
    }

    public void setPicWidth(int x) {
        picture1.setWidth(x);

        javax.swing.GroupLayout picture1Layout = new javax.swing.GroupLayout(picture1);
        picture1.setLayout(picture1Layout);
        picture1Layout.setHorizontalGroup(
                picture1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, picture1.getWidth(), Short.MAX_VALUE));
        picture1Layout.setVerticalGroup(
                picture1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, picture1.getHeight(), Short.MAX_VALUE));
    }

    public void setPicHeight(int y) {
        picture1.setHeight(y);

        javax.swing.GroupLayout picture1Layout = new javax.swing.GroupLayout(picture1);
        picture1.setLayout(picture1Layout);
        picture1Layout.setHorizontalGroup(
                picture1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, picture1.getWidth(), Short.MAX_VALUE));
        picture1Layout.setVerticalGroup(
                picture1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, picture1.getHeight(), Short.MAX_VALUE));
    }

    public java.awt.Rectangle getPicBounds() {
        return picture1.getBounds();
    }

    private void newMouseCor(java.awt.event.MouseEvent evt) {
        mouseCor[1][0] = mouseCor[0][0];
        mouseCor[1][1] = mouseCor[0][1];
        mouseCor[0][0] = evt.getX();
        mouseCor[0][1] = evt.getY();
        java.awt.Point p = picture1.getLocation();
        p.x += evt.getX();
        p.y += evt.getY();
        newGMouseCor(p);
    }

    private void newGMouseCor(java.awt.Point evt) {
        gMouseCor[1][0] = gMouseCor[0][0];
        gMouseCor[1][1] = gMouseCor[0][1];
        gMouseCor[0][0] = evt.x;
        gMouseCor[0][1] = evt.y;
    }

    private boolean mouseShifted() {
        if (mapedit.Constants.getCurrentMap() == null)
            return false;
        if (mouseCor[0][0] / mapedit.Constants.getCurrentMap().getDisplay().getXScale() != mouseCor[1][0] / mapedit.Constants.getCurrentMap().getDisplay().getXScale()) {
            return true;
        }
        if (mouseCor[0][1] / mapedit.Constants.getCurrentMap().getDisplay().getYScale() != mouseCor[1][1] / mapedit.Constants.getCurrentMap().getDisplay().getXScale()) {
            return true;
        }
        return false;
    }

    public boolean isSelected(int x, int y) {
        int xx = mouseCor[0][0] / mapedit.Constants.getCurrentMap().getDisplay().getXScale(),
                yy = mouseCor[0][1] / mapedit.Constants.getCurrentMap().getDisplay().getYScale();
        if (mapedit.Constants.getCurrentPalette().isSelected()) {
            int size = mapedit.Constants.getCurrentPalette().getPaletteSize();

            if ((Math.abs(x - xx) < size) && (Math.abs(y - yy) < size)) {
                return true;
            }
            return false;
        } else if (!mapedit.Constants.pasting) {
            int dxl = Math.min(dragCoors[0][0], dragCoors[1][0]),
                    dxr = Math.max(dragCoors[0][0], dragCoors[1][0]),
                    dyl = Math.min(dragCoors[0][1], dragCoors[1][1]),
                    dyr = Math.max(dragCoors[0][1], dragCoors[1][1]);
            if (x >= dxl && x <= dxr
                    && y >= dyl && y <= dyr) {
                return true;
            }
        } else {
            try {
                if (y >= yy && y < yy + mapedit.Constants.tilesCopy.length
                        && x >= xx && x < xx + mapedit.Constants.tilesCopy[0].length)
                    return true;
            } catch (NullPointerException e) {
                return false;
            }
        }
        return false;
    }

    public void setUndoRedoAbility(boolean undo, boolean redo) {
        this.undoMenuItem.setEnabled(undo);
        this.redoMenuItem.setEnabled(redo);
    }
    private int mousePressedCor[][] = new int[4][2], mouseReleasedCor[][] = new int[4][2];
    private int[][] mouseCor = new int[2][2], gMouseCor = new int[2][2];
    private boolean[][] mouseDown = new boolean[4][2];
    private int dragCoors[][] = new int[2][2];
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem cflip;
    private javax.swing.JMenuItem copyButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JMenuItem pasteButton;
    private GUI.Picture picture1;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.ButtonGroup terrainTypeGroup;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JMenu workMenu;
    // End of variables declaration//GEN-END:variables
}
